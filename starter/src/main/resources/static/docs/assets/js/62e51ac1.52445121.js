"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2755],{18535:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"development/agent","title":"Client/Customer Service Client Development Documentation","description":"Introduction","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/development/agent.md","sourceDirName":"development","slug":"/development/agent","permalink":"/docs/docs/development/agent","draft":false,"unlisted":false,"editUrl":"https://github.com/bytedesk/bytedesk-docs/blob/main/docs/development/agent.md","tags":[],"version":"current","lastUpdatedBy":"jack ning","lastUpdatedAt":1753832748000,"sidebarPosition":2,"frontMatter":{"sidebar_label":"Customer Service Client","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Visitor Client","permalink":"/docs/docs/development/chat"},"next":{"title":"Admin Backend","permalink":"/docs/docs/development/admin"}}');var a=t(86070),i=t(19971);const o={sidebar_label:"Customer Service Client",sidebar_position:2},r="Client/Customer Service Client Development Documentation",d={},c=[{value:"Introduction",id:"introduction",level:2},{value:"accessToken Login",id:"accesstoken-login",level:2},{value:"iframe Communication Interface Documentation",id:"iframe-communication-interface-documentation",level:2},{value:"Overview",id:"overview",level:3},{value:"Outgoing Events",id:"outgoing-events",level:3},{value:"1. Unread Message Count Event (unread_message_count)",id:"1-unread-message-count-event-unread_message_count",level:4},{value:"2. New Visitor Message Event (new_visitor_message)",id:"2-new-visitor-message-event-new_visitor_message",level:4},{value:"3. Agent Status Change Event (agent_status_changed)",id:"3-agent-status-change-event-agent_status_changed",level:4},{value:"4. Session Status Change Event (thread_status_changed)",id:"4-session-status-change-event-thread_status_changed",level:4},{value:"Receiving External Events",id:"receiving-external-events",level:3},{value:"1. Update Agent Status (update_agent_status)",id:"1-update-agent-status-update_agent_status",level:4},{value:"2. Set Agent to Online Status (update_agent_status_available)",id:"2-set-agent-to-online-status-update_agent_status_available",level:4},{value:"3. Set Agent to Busy Status (update_agent_status_busy)",id:"3-set-agent-to-busy-status-update_agent_status_busy",level:4},{value:"4. Set Agent to Offline Status (update_agent_status_offline)",id:"4-set-agent-to-offline-status-update_agent_status_offline",level:4},{value:"5. Refresh Session List (refresh_threads)",id:"5-refresh-session-list-refresh_threads",level:4},{value:"6. Clear Unread Message Count for Specified Session (clear_unread_count)",id:"6-clear-unread-message-count-for-specified-session-clear_unread_count",level:4},{value:"Usage Examples",id:"usage-examples",level:3},{value:"Complete Parent Window Code Example",id:"complete-parent-window-code-example",level:4},{value:"Important Notes",id:"important-notes",level:2},{value:"Agent Status Description",id:"agent-status-description",level:2},{value:"Session Type Description",id:"session-type-description",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"clientcustomer-service-client-development-documentation",children:"Client/Customer Service Client Development Documentation"})}),"\n",(0,a.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsx)(n.p,{children:"The Weiyu customer service client is used for professional enterprise IM or customer service workstations, providing session assignment, message processing, customer management, and other functions."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"agent",src:t(56210).A+"",width:"3396",height:"1754"})}),"\n",(0,a.jsx)(n.h2,{id:"accesstoken-login",children:"accessToken Login"}),"\n",(0,a.jsxs)(n.p,{children:["In the customer service client login path ",(0,a.jsx)(n.code,{children:"/agent/auth/login?accessToken=xxx"}),", login is performed through the ",(0,a.jsx)(n.code,{children:"accessToken"})," parameter."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"http://server-ip/agent/auth/login?accessToken=eyJhbGciOiJIUzM4NCJ9.eyJzdWIiOiJ7XCJwbGF0Zm9ybVwiOlwiYnl0ZWRlc2tcIixcInVzZXJuYW1lXCI6XCJhZG1pbkBlbWFpbC5jb21cIn0iLCJpYXQiOjE3NTI3MjQ4MzIsImV4cCI6MTc1NTMxNjgzMn0.3Q5ZXyNHImEGCErPkRXWG6rnFK1F_z77kTE6iRlpKmzUAtRpJZinjM_O0J0GebtM\n"})}),"\n",(0,a.jsx)(n.h2,{id:"iframe-communication-interface-documentation",children:"iframe Communication Interface Documentation"}),"\n",(0,a.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(n.p,{children:"The Weiyu customer service client supports embedding into external systems through iframe and provides bidirectional communication mechanisms. When it detects that the page is running in an iframe, it automatically enables communication functionality."}),"\n",(0,a.jsx)(n.h3,{id:"outgoing-events",children:"Outgoing Events"}),"\n",(0,a.jsx)(n.h4,{id:"1-unread-message-count-event-unread_message_count",children:"1. Unread Message Count Event (unread_message_count)"}),"\n",(0,a.jsx)(n.p,{children:"Triggered when the number of unread messages changes."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Parent window receives messages\nwindow.addEventListener('message', (event) => {\n  if (event.data.type === 'unread_message_count') {\n    const { totalUnreadCount, unreadThreads } = event.data.data;\n    console.log('Total unread messages:', totalUnreadCount);\n    console.log('Unread session list:', unreadThreads);\n  }\n});\n"})}),"\n",(0,a.jsx)(n.h4,{id:"2-new-visitor-message-event-new_visitor_message",children:"2. New Visitor Message Event (new_visitor_message)"}),"\n",(0,a.jsx)(n.p,{children:"Triggered when a new visitor connects."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Parent window receives messages\nwindow.addEventListener('message', (event) => {\n  if (event.data.type === 'new_visitor_message') {\n    const { thread } = event.data.data;\n    console.log('New visitor connected:', thread);\n    // thread contains: uid, topic, type, user, content, createdAt\n  }\n});\n"})}),"\n",(0,a.jsx)(n.h4,{id:"3-agent-status-change-event-agent_status_changed",children:"3. Agent Status Change Event (agent_status_changed)"}),"\n",(0,a.jsx)(n.p,{children:"Triggered when the agent status changes."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Parent window receives messages\nwindow.addEventListener('message', (event) => {\n  if (event.data.type === 'agent_status_changed') {\n    const { status, agentInfo } = event.data.data;\n    console.log('Agent status changed:', status);\n    console.log('Agent information:', agentInfo);\n  }\n});\n"})}),"\n",(0,a.jsx)(n.h4,{id:"4-session-status-change-event-thread_status_changed",children:"4. Session Status Change Event (thread_status_changed)"}),"\n",(0,a.jsx)(n.p,{children:"Triggered when the session status changes."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Parent window receives messages\nwindow.addEventListener('message', (event) => {\n  if (event.data.type === 'thread_status_changed') {\n    const { thread, action } = event.data.data;\n    console.log('Session status changed:', action);\n    console.log('Session information:', thread);\n  }\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"receiving-external-events",children:"Receiving External Events"}),"\n",(0,a.jsx)(n.h4,{id:"1-update-agent-status-update_agent_status",children:"1. Update Agent Status (update_agent_status)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Parent window sends message\nconst iframe = document.getElementById('bytedesk-iframe');\niframe.contentWindow.postMessage({\n  type: 'update_agent_status',\n  data: { status: 'AVAILABLE' } // Optional values: AVAILABLE, BUSY, OFFLINE\n}, '*');\n"})}),"\n",(0,a.jsx)(n.h4,{id:"2-set-agent-to-online-status-update_agent_status_available",children:"2. Set Agent to Online Status (update_agent_status_available)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Parent window sends message\niframe.contentWindow.postMessage({\n  type: 'update_agent_status_available'\n}, '*');\n"})}),"\n",(0,a.jsx)(n.h4,{id:"3-set-agent-to-busy-status-update_agent_status_busy",children:"3. Set Agent to Busy Status (update_agent_status_busy)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Parent window sends message\niframe.contentWindow.postMessage({\n  type: 'update_agent_status_busy'\n}, '*');\n"})}),"\n",(0,a.jsx)(n.h4,{id:"4-set-agent-to-offline-status-update_agent_status_offline",children:"4. Set Agent to Offline Status (update_agent_status_offline)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Parent window sends message\niframe.contentWindow.postMessage({\n  type: 'update_agent_status_offline'\n}, '*');\n"})}),"\n",(0,a.jsx)(n.h4,{id:"5-refresh-session-list-refresh_threads",children:"5. Refresh Session List (refresh_threads)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Parent window sends message\niframe.contentWindow.postMessage({\n  type: 'refresh_threads'\n}, '*');\n"})}),"\n",(0,a.jsx)(n.h4,{id:"6-clear-unread-message-count-for-specified-session-clear_unread_count",children:"6. Clear Unread Message Count for Specified Session (clear_unread_count)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"// Parent window sends message\niframe.contentWindow.postMessage({\n  type: 'clear_unread_count',\n  data: { threadUid: 'thread_uid_here' }\n}, '*');\n"})}),"\n",(0,a.jsx)(n.h3,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,a.jsx)(n.h4,{id:"complete-parent-window-code-example",children:"Complete Parent Window Code Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:"<!DOCTYPE html>\n<html>\n<head>\n    <title>Weiyu Customer Service System</title>\n</head>\n<body>\n    <iframe \n        id=\"bytedesk-iframe\" \n        src=\"https://your-domain.com/desktop\" \n        width=\"100%\" \n        height=\"600px\"\n        frameborder=\"0\">\n    </iframe>\n\n    <script>\n        const iframe = document.getElementById('bytedesk-iframe');\n        \n        // Listen for messages from Weiyu\n        window.addEventListener('message', (event) => {\n            // Verify message source\n            if (event.origin !== 'https://your-domain.com') {\n                return;\n            }\n            \n            const { type, data, timestamp, source } = event.data;\n            \n            if (source !== 'bytedesk-desktop') {\n                return;\n            }\n            \n            switch (type) {\n                case 'unread_message_count':\n                    console.log('Total unread messages:', data.totalUnreadCount);\n                    // Update UI to display unread message count\n                    updateUnreadCount(data.totalUnreadCount);\n                    break;\n                    \n                case 'new_visitor_message':\n                    console.log('New visitor connected:', data.thread);\n                    // Show new visitor notification\n                    showNewVisitorNotification(data.thread);\n                    break;\n                    \n                case 'agent_status_changed':\n                    console.log('Agent status changed:', data.status);\n                    // Update agent status display\n                    updateAgentStatus(data.status);\n                    break;\n                    \n                case 'thread_status_changed':\n                    console.log('Session status changed:', data.action);\n                    // Update session status display\n                    updateThreadStatus(data.thread, data.action);\n                    break;\n            }\n        });\n        \n        // Example: Set agent to online status\n        function setAgentOnline() {\n            iframe.contentWindow.postMessage({\n                type: 'update_agent_status_available'\n            }, '*');\n        }\n        \n        // Example: Set agent to busy status\n        function setAgentBusy() {\n            iframe.contentWindow.postMessage({\n                type: 'update_agent_status_busy'\n            }, '*');\n        }\n        \n        // Example: Set agent to offline status\n        function setAgentOffline() {\n            iframe.contentWindow.postMessage({\n                type: 'update_agent_status_offline'\n            }, '*');\n        }\n        \n        // Example: Refresh session list\n        function refreshThreads() {\n            iframe.contentWindow.postMessage({\n                type: 'refresh_threads'\n            }, '*');\n        }\n        \n        // Example: Clear unread message count for specified session\n        function clearThreadUnread(threadUid) {\n            iframe.contentWindow.postMessage({\n                type: 'clear_unread_count',\n                data: { threadUid }\n            }, '*');\n        }\n        \n        // UI update function examples\n        function updateUnreadCount(count) {\n            // Update unread message count display\n            document.getElementById('unread-count').textContent = count;\n        }\n        \n        function showNewVisitorNotification(thread) {\n            // Show new visitor notification\n            alert(`New visitor connected: ${thread.user.nickname}`);\n        }\n        \n        function updateAgentStatus(status) {\n            // Update agent status display\n            document.getElementById('agent-status').textContent = status;\n        }\n        \n        function updateThreadStatus(thread, action) {\n            // Update session status display\n            console.log(`Session ${thread.uid} status changed: ${action}`);\n        }\n    <\/script>\n</body>\n</html>\n"})}),"\n",(0,a.jsx)(n.h2,{id:"important-notes",children:"Important Notes"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Security"}),": Please ensure to verify the message source and only process messages from trusted domains."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Compatibility"}),": Ensure that the parent window and iframe use the same protocol (http/https)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Error Handling"}),": It is recommended to add appropriate error handling mechanisms."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Performance"}),": Avoid sending messages frequently to prevent performance impact."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Debugging"}),": In development environments, you can view communication logs through the browser console."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"agent-status-description",children:"Agent Status Description"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"AVAILABLE"}),": Online reception"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"BUSY"}),": Customer service busy"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"OFFLINE"}),": Customer service offline"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"session-type-description",children:"Session Type Description"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"AGENT"}),": One-to-one customer service session"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"WORKGROUP"}),": Workgroup customer service session"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"ROBOT"}),": Robot customer service session"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"MEMBER"}),": Colleague one-to-one session"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"GROUP"}),": Group session"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},19971:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(30758);const a={},i=s.createContext(a);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},56210:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/agent_chat-a5c92da3cdd013468d0b02320727b45e.png"}}]);