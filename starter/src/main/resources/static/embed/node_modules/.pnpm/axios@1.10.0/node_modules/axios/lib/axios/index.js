import a from "../utils/index.js";
import p from "../helpers/bind/index.js";
import m from "../core/Axios/index.js";
import i from "../core/mergeConfig/index.js";
import f from "../defaults/index/index.js";
import l from "../helpers/formDataToJSON/index.js";
import c from "../cancel/CanceledError/index.js";
import d from "../cancel/CancelToken/index.js";
import u from "../cancel/isCancel/index.js";
import { VERSION as x } from "../env/data/index.js";
import C from "../helpers/toFormData/index.js";
import A from "../core/AxiosError/index.js";
import E from "../helpers/spread/index.js";
import O from "../helpers/isAxiosError/index.js";
import S from "../core/AxiosHeaders/index.js";
import H from "../adapters/adapters/index.js";
import T from "../helpers/HttpStatusCode/index.js";
function n(o) {
  const t = new m(o), e = p(m.prototype.request, t);
  return a.extend(e, m.prototype, t, { allOwnKeys: !0 }), a.extend(e, t, null, { allOwnKeys: !0 }), e.create = function(s) {
    return n(i(o, s));
  }, e;
}
const r = n(f);
r.Axios = m;
r.CanceledError = c;
r.CancelToken = d;
r.isCancel = u;
r.VERSION = x;
r.toFormData = C;
r.AxiosError = A;
r.Cancel = r.CanceledError;
r.all = function(t) {
  return Promise.all(t);
};
r.spread = E;
r.isAxiosError = O;
r.mergeConfig = i;
r.AxiosHeaders = S;
r.formToJSON = (o) => l(a.isHTMLForm(o) ? new FormData(o) : o);
r.getAdapter = H.getAdapter;
r.HttpStatusCode = T;
r.default = r;
export {
  r as default
};
