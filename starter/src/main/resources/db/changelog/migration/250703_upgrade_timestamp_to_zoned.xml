<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd">

    <!-- 
    Upgrade BaseEntity timestamp fields from ZonedDateTime to ZonedDateTime
    This migration converts all tables that extend BaseEntity from 
    timestamp without time zone to timestamp with time zone
    -->
    
    <changeSet id="250703_upgrade_base_entity_timestamp_fields" author="jackning">
        <comment>Upgrade BaseEntity timestamp fields from ZonedDateTime to ZonedDateTime for internationalization support</comment>
        
        <!-- Get all tables that have created_at and updated_at columns -->
        <sql>
            DO $$
            DECLARE
                table_record RECORD;
                column_record RECORD;
                has_created_at BOOLEAN;
                has_updated_at BOOLEAN;
            BEGIN
                -- Loop through all tables in the current schema
                FOR table_record IN 
                    SELECT tablename 
                    FROM pg_tables 
                    WHERE schemaname = current_schema()
                    AND tablename NOT LIKE 'flyway_%'
                    AND tablename NOT LIKE 'liquibase_%'
                LOOP
                    -- Check if table has created_at and updated_at columns
                    has_created_at := FALSE;
                    has_updated_at := FALSE;
                    
                    FOR column_record IN 
                        SELECT column_name, data_type 
                        FROM information_schema.columns 
                        WHERE table_schema = current_schema() 
                        AND table_name = table_record.tablename
                        AND column_name IN ('created_at', 'updated_at')
                    LOOP
                        IF column_record.column_name = 'created_at' THEN
                            has_created_at := TRUE;
                        ELSIF column_record.column_name = 'updated_at' THEN
                            has_updated_at := TRUE;
                        END IF;
                    END LOOP;
                    
                    -- If table has both created_at and updated_at columns, upgrade them
                    IF has_created_at AND has_updated_at THEN
                        -- Upgrade created_at column
                        EXECUTE format('ALTER TABLE %I ALTER COLUMN created_at TYPE timestamp with time zone USING created_at AT TIME ZONE ''Asia/Shanghai''', table_record.tablename);
                        
                        -- Upgrade updated_at column
                        EXECUTE format('ALTER TABLE %I ALTER COLUMN updated_at TYPE timestamp with time zone USING updated_at AT TIME ZONE ''Asia/Shanghai''', table_record.tablename);
                        
                        -- Log the upgrade
                        RAISE NOTICE 'Upgraded timestamp fields for table: %', table_record.tablename;
                    END IF;
                END LOOP;
            END $$;
        </sql>
        
        <!-- Add comments to document the upgrade -->
        <sql>
            COMMENT ON COLUMN created_at IS 'Creation timestamp with timezone (upgraded from ZonedDateTime to ZonedDateTime for internationalization)';
            COMMENT ON COLUMN updated_at IS 'Last update timestamp with timezone (upgraded from ZonedDateTime to ZonedDateTime for internationalization)';
        </sql>
    </changeSet>

    <!-- 
    Rollback script - if needed to revert the changes
    Note: This rollback assumes the original data was in Asia/Shanghai timezone
    -->
    <changeSet id="250703_rollback_base_entity_timestamp_fields" author="jackning" runOnChange="false">
        <comment>Rollback script for BaseEntity timestamp fields upgrade</comment>
        <rollback>
            <sql>
                DO $$
                DECLARE
                    table_record RECORD;
                    column_record RECORD;
                    has_created_at BOOLEAN;
                    has_updated_at BOOLEAN;
                BEGIN
                    -- Loop through all tables in the current schema
                    FOR table_record IN 
                        SELECT tablename 
                        FROM pg_tables 
                        WHERE schemaname = current_schema()
                        AND tablename NOT LIKE 'flyway_%'
                        AND tablename NOT LIKE 'liquibase_%'
                    LOOP
                        -- Check if table has created_at and updated_at columns
                        has_created_at := FALSE;
                        has_updated_at := FALSE;
                        
                        FOR column_record IN 
                            SELECT column_name, data_type 
                            FROM information_schema.columns 
                            WHERE table_schema = current_schema() 
                            AND table_name = table_record.tablename
                            AND column_name IN ('created_at', 'updated_at')
                        LOOP
                            IF column_record.column_name = 'created_at' THEN
                                has_created_at := TRUE;
                            ELSIF column_record.column_name = 'updated_at' THEN
                                has_updated_at := TRUE;
                            END IF;
                        END LOOP;
                        
                        -- If table has both created_at and updated_at columns, rollback them
                        IF has_created_at AND has_updated_at THEN
                            -- Rollback created_at column
                            EXECUTE format('ALTER TABLE %I ALTER COLUMN created_at TYPE timestamp without time zone USING created_at AT TIME ZONE ''Asia/Shanghai''', table_record.tablename);
                            
                            -- Rollback updated_at column
                            EXECUTE format('ALTER TABLE %I ALTER COLUMN updated_at TYPE timestamp without time zone USING updated_at AT TIME ZONE ''Asia/Shanghai''', table_record.tablename);
                            
                            -- Log the rollback
                            RAISE NOTICE 'Rolled back timestamp fields for table: %', table_record.tablename;
                        END IF;
                    END LOOP;
                END $$;
            </sql>
        </rollback>
    </changeSet>

</databaseChangeLog> 