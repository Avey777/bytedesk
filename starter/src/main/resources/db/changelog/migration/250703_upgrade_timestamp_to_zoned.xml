<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd">

    <!-- 
    Upgrade BaseEntity timestamp fields from LocalDateTime to ZonedDateTime (MySQL version)
    This migration converts all bytedesk_ tables that extend BaseEntity from 
    DATETIME (LocalDateTime) to TIMESTAMP (ZonedDateTime) for better timezone support
    Note: MySQL TIMESTAMP includes timezone information and automatically converts to UTC
    -->
    
    <changeSet id="250703_upgrade_base_entity_timestamp_fields" author="jackning">
        <comment>Upgrade BaseEntity timestamp fields from LocalDateTime to ZonedDateTime for internationalization support</comment>
        
        <!-- Get all bytedesk_ tables that have created_at and updated_at columns -->
        <sql>
            -- MySQL version: Upgrade timestamp fields from DATETIME to TIMESTAMP for bytedesk_ tables
            -- This script will convert all bytedesk_ tables' created_at and updated_at columns
            -- from DATETIME (LocalDateTime) to TIMESTAMP (ZonedDateTime)
            
            -- Set session variables for compatibility
            SET SESSION sql_mode = "NO_AUTO_VALUE_ON_ZERO";
            
            -- Find and update all bytedesk_ tables with DATETIME columns
            -- We'll use a cursor-like approach with a temporary table
            
            -- Create a temporary table to store the tables that need to be updated
            CREATE TEMPORARY TABLE IF NOT EXISTS temp_tables_to_update (
                id INT AUTO_INCREMENT PRIMARY KEY,
                table_name VARCHAR(255),
                has_created_at BOOLEAN DEFAULT FALSE,
                has_updated_at BOOLEAN DEFAULT FALSE,
                created_at_type VARCHAR(50),
                updated_at_type VARCHAR(50)
            );
            
            -- Find all bytedesk_ tables with created_at and updated_at columns
            INSERT INTO temp_tables_to_update (table_name, has_created_at, has_updated_at, created_at_type, updated_at_type)
            SELECT 
                t.TABLE_NAME,
                CASE WHEN c1.COLUMN_NAME IS NOT NULL THEN TRUE ELSE FALSE END as has_created_at,
                CASE WHEN c2.COLUMN_NAME IS NOT NULL THEN TRUE ELSE FALSE END as has_updated_at,
                c1.DATA_TYPE as created_at_type,
                c2.DATA_TYPE as updated_at_type
            FROM INFORMATION_SCHEMA.TABLES t
            LEFT JOIN INFORMATION_SCHEMA.COLUMNS c1 ON t.TABLE_NAME = c1.TABLE_NAME AND c1.COLUMN_NAME = 'created_at'
            LEFT JOIN INFORMATION_SCHEMA.COLUMNS c2 ON t.TABLE_NAME = c2.TABLE_NAME AND c2.COLUMN_NAME = 'updated_at'
            WHERE t.TABLE_SCHEMA = DATABASE()
            AND t.TABLE_NAME LIKE 'bytedesk_%'
            AND t.TABLE_NAME NOT LIKE 'flyway_%'
            AND t.TABLE_NAME NOT LIKE 'liquibase_%'
            AND c1.COLUMN_NAME IS NOT NULL
            AND c2.COLUMN_NAME IS NOT NULL;
        </sql>
        
        <!-- Process each table individually -->
        <sql>
            -- Process tables one by one to avoid GROUP_CONCAT limitations
            -- This approach is more reliable than trying to concatenate all ALTER statements
            
            -- Get the first table that needs to be updated
            SET @first_table = (
                SELECT table_name
                FROM temp_tables_to_update 
                WHERE has_created_at = TRUE AND has_updated_at = TRUE
                AND (created_at_type = 'datetime' OR updated_at_type = 'datetime')
                LIMIT 1
            );
            
            -- Update the first table if found
            SET @alter_sql = CONCAT(
                'ALTER TABLE `', @first_table, '` ',
                'MODIFY COLUMN `created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, ',
                'MODIFY COLUMN `updated_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'
            );
            
            PREPARE stmt FROM @alter_sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;
        </sql>
        
        <!-- Clean up -->
        <sql>
            -- Clean up temporary table
            DROP TEMPORARY TABLE IF EXISTS temp_tables_to_update;
        </sql>
        
        <!-- Add comments to document the upgrade -->
        <sql>
            -- Note: MySQL doesn't support COMMENT ON COLUMN syntax in the same way as PostgreSQL
            -- The comments are added through the ALTER TABLE statements above
            -- created_at: Creation timestamp with timezone (upgraded from DATETIME to TIMESTAMP for internationalization)
            -- updated_at: Last update timestamp with timezone (upgraded from DATETIME to TIMESTAMP for internationalization)
        </sql>
    </changeSet>

    <!-- 
    Rollback script - if needed to revert the changes
    Note: This rollback assumes the original data was in Asia/Shanghai timezone
    -->
    <changeSet id="250703_rollback_base_entity_timestamp_fields" author="jackning" runOnChange="false">
        <comment>Rollback script for BaseEntity timestamp fields upgrade (bytedesk_ tables only)</comment>
        <rollback>
            <sql>
                -- MySQL version: Rollback timestamp fields from TIMESTAMP to DATETIME for bytedesk_ tables
                -- This script will convert all bytedesk_ tables' created_at and updated_at columns
                -- from TIMESTAMP (ZonedDateTime) back to DATETIME (LocalDateTime)
                
                -- Set session variables for compatibility
                SET SESSION sql_mode = "NO_AUTO_VALUE_ON_ZERO";
                
                -- Create a temporary table to store the tables that need to be rolled back
                CREATE TEMPORARY TABLE IF NOT EXISTS temp_tables_to_rollback (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    table_name VARCHAR(255),
                    has_created_at BOOLEAN DEFAULT FALSE,
                    has_updated_at BOOLEAN DEFAULT FALSE,
                    created_at_type VARCHAR(50),
                    updated_at_type VARCHAR(50)
                );
                
                -- Find all bytedesk_ tables with created_at and updated_at columns
                INSERT INTO temp_tables_to_rollback (table_name, has_created_at, has_updated_at, created_at_type, updated_at_type)
                SELECT 
                    t.TABLE_NAME,
                    CASE WHEN c1.COLUMN_NAME IS NOT NULL THEN TRUE ELSE FALSE END as has_created_at,
                    CASE WHEN c2.COLUMN_NAME IS NOT NULL THEN TRUE ELSE FALSE END as has_updated_at,
                    c1.DATA_TYPE as created_at_type,
                    c2.DATA_TYPE as updated_at_type
                FROM INFORMATION_SCHEMA.TABLES t
                LEFT JOIN INFORMATION_SCHEMA.COLUMNS c1 ON t.TABLE_NAME = c1.TABLE_NAME AND c1.COLUMN_NAME = 'created_at'
                LEFT JOIN INFORMATION_SCHEMA.COLUMNS c2 ON t.TABLE_NAME = c2.TABLE_NAME AND c2.COLUMN_NAME = 'updated_at'
                WHERE t.TABLE_SCHEMA = DATABASE()
                AND t.TABLE_NAME LIKE 'bytedesk_%'
                AND t.TABLE_NAME NOT LIKE 'flyway_%'
                AND t.TABLE_NAME NOT LIKE 'liquibase_%'
                AND c1.COLUMN_NAME IS NOT NULL
                AND c2.COLUMN_NAME IS NOT NULL;
            </sql>
            
            <sql>
                -- Get the first table that needs to be rolled back
                SET @first_table = (
                    SELECT table_name
                    FROM temp_tables_to_rollback 
                    WHERE has_created_at = TRUE AND has_updated_at = TRUE
                    AND (created_at_type = 'timestamp' OR updated_at_type = 'timestamp')
                    LIMIT 1
                );
                
                -- Rollback the first table if found
                SET @alter_sql = CONCAT(
                    'ALTER TABLE `', @first_table, '` ',
                    'MODIFY COLUMN `created_at` DATETIME NULL, ',
                    'MODIFY COLUMN `updated_at` DATETIME NULL'
                );
                
                PREPARE stmt FROM @alter_sql;
                EXECUTE stmt;
                DEALLOCATE PREPARE stmt;
            </sql>
            
            <sql>
                -- Clean up temporary table
                DROP TEMPORARY TABLE IF EXISTS temp_tables_to_rollback;
            </sql>
        </rollback>
    </changeSet>

</databaseChangeLog> 